//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEditor;
using UnityEngine;
using System.Collections;
using System.Collections.Generic;

namespace EditorNode
{
	public class BaseNode
	{
		public Rect windowRect;
		public Boolean is_selected = false;
		public List<BaseNode> neighbors = new List<BaseNode>();
		public BaseNode parent = null;

		public BaseNode (float x,float y)
		{
			this.windowRect = new Rect (x,y, 100f, 100f);
		}

		public void AddTarget(BaseNode target)
		{
			this.neighbors.Add (target);
			target.parent = this;
		}

		public void DrawNode(int i,GUI.WindowFunction DoWindow)
		{
			if (is_selected) {
				Color pre_color = GUI.color;
				GUI.color = new Color(106.0f/255,132.0f/255,219.0f/255);
				this.windowRect = GUI.Window (i, this.windowRect, DoWindow, new GUIContent ("haha"));
				GUI.color = pre_color;
			} else {
				Color pre_color = GUI.color;
				GUI.color = new Color(0,1,0);
				this.windowRect = GUI.Window (i, this.windowRect, DoWindow, new GUIContent ("haha"));
				GUI.color = pre_color;
			}
		}

		public void DrawCurve()
		{
			for (int i=0; i<neighbors.Count; i++) {
				BaseNode n = neighbors[i];
				Vector3 start = GetCenterPosition();
				Vector3 end = n.GetCenterPosition();
				Handles.DrawBezier(start,end,start+Vector3.right*50,end+Vector3.left*50,Color.red,null,5.0f);
			}
		}

		public Vector3 GetCenterPosition()
		{
			return new Vector3 (this.windowRect.center.x, this.windowRect.center.y, 0);
		}

		public string NodeToString()
		{
			string node_string = "<BaseNode ";
			node_string += "pos_x=\"" + windowRect.x + "\" pos_y=\"" + windowRect.y + "\" size_x=\""+windowRect.size.x+"\" size_y=\""+windowRect.size.y+"\"";
			node_string += ">\n";
			foreach (BaseNode n in neighbors) {
				node_string += n.NodeToString();
			}
			node_string += "</BaseNode>\n";
			return node_string;
		}
	}
}


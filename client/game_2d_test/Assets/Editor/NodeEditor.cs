//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEditor;
using UnityEngine;
using System.Collections;
using System.Collections.Generic;

namespace EditorNode
{

	public class NodeEditor:EditorWindow
	{

		public List<BaseNode> nodes = new List<BaseNode>();

		private BaseNode transition_from_node = null;

		[MenuItem ("Window/行为树")]
		public static void  ShowWindow () 
		{
			EditorWindow.GetWindow(typeof(NodeEditor));
		}

		private int GetMousePositionInRegion(Vector3 mouse_pos)
		{
			int in_node_region_index = -1;
			
			for (int i=0; i<nodes.Count; i++) {
				if(nodes[i].windowRect.Contains(new Vector3(mouse_pos.x,mouse_pos.y,0)))
				{
					in_node_region_index = i;
					break;
				}
			}

			return in_node_region_index;
		}

		void OnGUI () {

			Event e = Event.current;

			//判断是否在某个节点内部
			int in_node_region_index = GetMousePositionInRegion (e.mousePosition);

			if (e.button == 1&&e.type==EventType.mouseUp) {
				GenericMenu menu = new GenericMenu();
				menu.AddItem(new GUIContent("新加一个节点"),false,ContextCallback,e.mousePosition);
				if(in_node_region_index>=0)
				{
					this.transition_from_node = nodes[in_node_region_index];
					menu.AddItem(new GUIContent("新加一条边"),false,AddTransitionCallback,this.transition_from_node);
				}
				else
				{
					menu.AddDisabledItem(new GUIContent("新加一条边"));
				}


				menu.ShowAsContext();
			}
			Handles.BeginGUI();

			for (int i=0; i<nodes.Count; i++) {
				nodes[i].DrawCurve();
			}

			if (this.transition_from_node != null) {

				Vector3 s = this.transition_from_node.GetCenterPosition();
				Vector3 end = new Vector3(e.mousePosition.x,e.mousePosition.y,0);
				DrawBezierCurve(s,end);
				
				if(e.button==0&&e.type==EventType.mouseUp){

					int to_region_index = GetMousePositionInRegion(e.mousePosition);
					if(to_region_index>=0)
					{
						this.transition_from_node.AddTarget(nodes[to_region_index]);
					}

					this.transition_from_node = null;
				}
				Repaint ();
			}

			Handles.EndGUI();



			BeginWindows();
			for (int i=0; i<nodes.Count; i++) {
				nodes[i].windowRect = GUI.Window(i,nodes[i].windowRect,DoWindow,new GUIContent("haha"));
				nodes[i].DrawNode();
			}

			//windowRect = GUILayout.Window(0, windowRect, DoWindow, "Hi There");
			//nodes.Add (b);
			EndWindows();
		}

		private void AddTransitionCallback(object from_node)
		{

		}

		private void ContextCallback(object obj)
		{
			//Debug.Log ("the obj is " + obj);
			Vector2 pos = (Vector2)obj;
			BaseNode n = new BaseNode (pos.x,pos.y);

			nodes.Add (n);
			//n.windowRect = GUILayout.Window(0, nodes[i].windowRect, DoWindow, "Hi There");
		}

		private void DrawBezierCurve(Vector3 start,Vector3 end)
		{
			Handles.DrawBezier(start,end,start+Vector3.right*50,end+Vector3.left*50,Color.red,null,5.0f);
		}

		// Make the contents of the window
		void DoWindow ( int windowID ) {
			GUILayout.Button("Hi");
			GUI.DragWindow();
		}
	}
}


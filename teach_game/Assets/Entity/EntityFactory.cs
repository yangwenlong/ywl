//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Reflection;
using System.Collections;
using System.Collections.Generic;

namespace EntityNS
{
	
	public class Entity
	{
		public GameObject instance;
		public Entity()
		{
			instance = GameObject.CreatePrimitive (PrimitiveType.Cube);
		}
		public int id;
		public void set_username(String hello)
		{
			//Debug.Log("the hello is "+hello);
		}

		public void set_position(double x,double y,double z)
		{
			//Debug.Log("the set_position is "+x);
			this.instance.transform.position = new Vector3 ((float)x, (float)y, (float)z);
		}

		public void cellSetPosition(double x,double y,double z)
		{
			String data = "{\"id\":"+this.id+",\"function\":\"position\",\"params\":\"["+x+","+y+","+z+"]\"}";
			AsynchronousClient.Send (data);
		}
	}
	
	public class EntityManager
	{
		private static EntityManager _manager;
		public static Entity player;
		public Dictionary<int,Entity> entities = new Dictionary<int,Entity>();
		private EntityManager(){}
		public static EntityManager getInstance(){
			if(_manager==null)
			{
				_manager = new EntityManager();
			}
			return _manager;
		} 
	}
	
	public class EntityFactory
	{
		private static EntityFactory instance;
		private EntityFactory ()
		{
		}
		
		public static EntityFactory getInstance()
		{
			if(instance==null){
				instance = new EntityFactory();
			}
			return instance;
		}
		
		public Entity getEntity(int id)
		{
			Entity entity =(Entity) Activator.CreateInstance(null, "EntityNS.Entity").Unwrap();
			//t.GetProperty("id").SetValue(entity, id, null);
			entity.id = id;
			EntityManager.getInstance().entities[id] =  entity;
			EntityManager.getInstance ().player = entity;
			//Debug.Log ("the entity si" + id + entity);
			return entity;
		}
		
		public void InvokeMethod(string entity_name,int entid,String method_name,object[] ps)
		{
			Type t = Type.GetType(entity_name);
			MethodInfo mi = t.GetMethod(method_name);
			ParameterInfo[] parameters = mi.GetParameters ();
			for(int i=0;i<parameters.Length;i++) {
				ParameterInfo p = parameters[i];
				if(p.ParameterType!=ps[i].GetType())
				{
					// Thing.implicit operator Thing(string s)
					var converter = p.ParameterType.GetMethod("op_Implicit", new[] { ps[i].GetType() });
					
					if (converter != null)
						ps[i] = converter.Invoke(null, new[] { ps[i] }); // Converter exists: arg = (Thing)"foo";

				}
			}
			//Debug.Log ("the entity si"+mi + ps + EntityManager.getInstance().entities[entid]);
			mi.Invoke(EntityManager.getInstance().entities[entid], ps);
		}
	}
}

